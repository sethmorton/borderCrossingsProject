// asign name for app.vue
name: "mainBar",
// every global variable
data() {
  return {
    isHidden: true,
    defaultData: [],
    californiaData: [],
    selectedArea: "California",
    optionsForArea: ["California Border", "Entire USA-Mexico border"],
    selectedOptionsForPorts: [],
    optionsForPorts: [],
    selectedOptionsForMeasure: [],
    optionsForMeasure: [],
    optionsStartSelect: [],
    optionsEndSelect: [],
    selectedStartSelect: "2019-11-01T00:00:00.000",
    selectedEndSelect: "2019-12-01T00:00:00.000",
    totalNumber: "",
    dateForPageEnd: "",
    percentChangeForDom: "",
    dynamicYear: [],
    dataNonDynamicMonth: [
      "12",
      "11",
      "10",
      "09",
      "08",
      "07",
      "06",
      "05",
      "04",
      "03",
      "02",
      "01"
    ],
    selectedStartYear: "2018",
    selectedStartMonth: "12",
    selectedEndYear: "2019",
    selectedEndMonth: "12",
    unpipedTime: [],
    previousYearOrNot: "",
    startYearMonth: "",
    endYearMonth: "",
    increaseOrDecrease: "",
    hasBeenCreated: null
  };
},
// methods
methods: {
  // set the query options
  // setGetCheckBoxes: function(data) {
  //   console.log(data);
  //   // set empty arrays
  //   var containerPort = [];
  //   var containerMeasure = [];
  //   var containerTime = [];
  //   // for loop unique arrays
  //   for (let i = 0; i < data.length; i++) {
  //     containerPort.push(data[i].port_name);
  //     containerMeasure.push(data[i].measure);
  //     containerTime.push(data[i].date);
  //   }
  //   // uniqueArrays for checkboxes, selects, and radios
  //   var uniquePort = [...new Set(containerPort)];
  //   var uniqueMeasure = [...new Set(containerMeasure)];
  //   var uniqueTime = [...new Set(containerTime)];
  //   this.optionsStartSelect = uniqueTime;
  //   this.optionsEndSelect = uniqueTime;
  //   this.optionsForPorts = uniquePort;
  //   this.selectedOptionsForPorts = uniquePort;
  //   console.log(this.selectedOptionsForPorts);
  //   this.optionsForMeasure = uniqueMeasure;
  //   this.selectedOptionsForMeasure = uniqueMeasure;
  // },
  // pipe the json for selected ports, selected measures
  pipeData: function(data) {
    console.log(data);
    var selectedOptionsForPorts = this.selectedOptionsForPorts;
    console.log(selectedOptionsForPorts);
    var filterOutput1 = data.filter(function(item) {
      return selectedOptionsForPorts.includes(item.port_name);
    });
    console.log(filterOutput1);
    var selectedOptionsForMeasure = this.selectedOptionsForMeasure;
    var unpipedTime = filterOutput1.filter(function(item) {
      return selectedOptionsForMeasure.includes(item.measure);
    });
    this.unpipedTime = unpipedTime;
    // pass the filtered data into the time dates "getter"
    this.getTimeDates(this.unpipedTime);
  },
  // filter for selected time
  getTimeDates: function(unpipedTime) {
    console.log(unpipedTime);
      var selectedEndMonth = ('0' + this.selectedEndMonth).slice(-2)
    console.log(selectedEndMonth);
    var selectedStartMonth = ('0' + this.selectedStartMonth).slice(-2)
    console.log(selectedStartMonth);

    this.selectedEndSelect =
      this.selectedEndYear + "-" + selectedEndMonth + "-01T00:00:00.000";
    var endDate = this.selectedEndSelect;
    console.log(endDate);
    this.selectedStartSelect =
      this.selectedStartYear +
      "-" +
      selectedStartMonth +
      "-01T00:00:00.000";
    var startDate = this.selectedStartSelect;
    this.pipeOriginalTimeData(startDate, endDate, unpipedTime);
  },
  // pass the filtered data and the time dates
  pipeOriginalTimeData(startDate, endDate, unpipedTime) {
    console.log(startDate)
    console.log(endDate);
    console.log(unpipedTime);

    var pipedTime = unpipedTime.filter(function(obj) {
      return obj.date >= startDate && obj.date <= endDate;
    });
    console.log(pipedTime);

    // pass the filtered data into the percent function
    this.getNumbers(pipedTime, unpipedTime);
  },
  // get the total number
  getNumbers: function(pipedTime, unpipedTime) {
    console.log(pipedTime);
    // set empty array for sum
    var containerValue = [];
    for (var i = 0; i < pipedTime.length; i++) {
      containerValue.push(pipedTime[i].value);
    }
    // convert strings to numbers with map functions
    var numberFy = containerValue.map(Number);
    const reducer = (accumulator, currentValue) => accumulator + currentValue;
    // reduce (sum) the array
    var totalValue = numberFy.reduce(reducer);
    totalValue.toLocaleString();
    // format number method for insertion of commas
    var forComma = this.formatNumber(totalValue);
    // reset container value for next watch
    containerValue.length = 0;
    this.totalNumber = forComma;
    // get percent change
    this.percentChange(totalValue, pipedTime, unpipedTime);
  },
  // comma method
  formatNumber: function(num) {
    return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
  },
  // percentChange method to get percentchange for the years - 1 of the original time filter year
  percentChange: function(totalOldValue, pipedTime, filterBeforeTime) {
    console.log(filterBeforeTime);
    // set dates and subtract a year off of them
    // var endSelected = this.selectedEndSelect;
    // console.log(this.selectedEndSelect);
    //
    // var startSelected = this.selectedStartSelect;
    console.log(this.selectedEndSelect);
    var endDate = moment(this.selectedEndSelect)
    console.log(endDate);
    var startDate = moment(this.selectedStartSelect);
    var startDateMoment = moment(startDate).subtract(1, "years").format("YYYY-MM-DD")
    console.log(startDateMoment);
    var endDateMoment = moment(endDate).subtract(1, "years").format("YYYY-MM-DD")
    console.log(moment(startDateMoment, "YYYY/MM/DD").year());
   console.log(startDateMoment);
   console.log(endDateMoment);
    this.previousYearOrNot =
      this.startYearMonth +
      " " +
      moment(startDateMoment, "YYYY/MM/DD").year() +
      " to " +
      this.endYearMonth +
      " " +
      moment(endDateMoment, "YYYY/MM/DD").year();
    var startdatesteps = moment(startDateMoment, "YYYY/MM/DD").month() + 1;
    var startDateStepsIsoMonth = ('0' + startdatesteps).slice(-2)
    console.log(startDateStepsIsoMonth);
    var startDateStepsIsoYear = moment(startDateMoment, "YYYY/MM/DD").year();
    console.log(startDateStepsIsoYear);
    var enddatesteps = moment(endDateMoment, "YYYY/MM/DD").month() + 1;
    var endDateStepsIsoMonth = ('0' + enddatesteps).slice(-2)
    console.log(endDateStepsIsoMonth);
    var endDateStepsIsoYear = moment(endDateMoment, "YYYY/MM/DD").year();
    console.log(endDateStepsIsoYear);
    var startDateFinal =
    startDateStepsIsoYear +
      "-" +
      startDateStepsIsoMonth +
      "-01T00:00:00.000";
      console.log(startDateFinal);
    var endDateFinal =
      endDateStepsIsoYear +
      "-" +
      endDateStepsIsoMonth +
      "-01T00:00:00.000";
      console.log(endDateFinal);
      console.log('hello')
    // filter the data ased on the newly created date strings
    var result = filterBeforeTime.filter(function(obj) {
      return obj.date >= startDateFinal && obj.date <= endDateFinal;
    });
    console.log(result);
    // same process as before, getting the total sum for the future math
    var containerValue = [];
    for (var i = 0; i < result.length; i++) {
      containerValue.push(result[i].value);
    }
    var numberFy1 = containerValue.map(Number);
    const reducer = (accumulator, currentValue) => accumulator + currentValue;
    var totalValue = numberFy1.reduce(reducer);
    // a series of variables for extracting commas and numberfy string for if statement
    var totalNumberOld = this.totalNumber;
    var replaceCommas = totalNumberOld.replace(/,/g, "");
    var replacedCommas = Number(replaceCommas);
    // is the value an increase since the previous years or not?
    if (replacedCommas > totalValue) {
      this.increaseOrDecrease = "increase";
    }
    if (replacedCommas < totalValue) {
      this.increaseOrDecrease = "decrease";
    }
    // this is where the math happens
    var percentChange = ((totalValue - totalOldValue) / totalValue) * 100;
    // rounding the very long number
    var percentChangeNew = function money_round(num) {
      //
      return Math.ceil(num * 100) / 100;
    };
    var forAbsolute = percentChangeNew(percentChange);
    // setting the global variable as the rounded percent change
    this.percentChangeForDom = Math.abs(forAbsolute);
  },
  getNewQueryOptions: function(data) {
    var containerPort = [];
    var containerMeasure = [];
    var containerTime = [];
    // for loop unique arrays
    for (let i = 0; i < data.length; i++) {
      containerPort.push(data[i].port_name);
      containerMeasure.push(data[i].measure);
      containerTime.push(data[i].date);
    }
    // uniqueArrays for checkboxes, selects, and radios
    var uniquePort = [...new Set(containerPort)];
    var uniqueMeasure = [...new Set(containerMeasure)];
    var uniqueTime = [...new Set(containerTime)];
    this.optionsStartSelect = uniqueTime;
    this.optionsEndSelect = uniqueTime;
    this.optionsForPorts = uniquePort;
    this.selectedOptionsForPorts = uniquePort;
    this.optionsForMeasure = uniqueMeasure;
    this.selectedOptionsForMeasure = uniqueMeasure;
  },
  minTwoDigits: function(n) {
    return (n < 10 ? "0" : "") + n;
  },
  getDataAxios: function(
    selectedEndYear,
    selectedEndMonth,
    selectedStartYear,
    selectedStartMonth
  ) {
    console.log(selectedEndYear);
    console.log(selectedEndMonth);
    console.log(selectedStartYear);
    console.log(selectedStartMonth);
    // this method is first, fetching data by dynamically inserting dates subtracted by one into the query to get enough json for the percent change function
    // subtracting start year by one for query
    var startYearSubtracted = Number(selectedStartYear) - 1;
    console.log(startYearSubtracted);
    // function for getting month name for dom
    var month_name = function(dt) {
      var mlist = [
        "Jan.",
        "Feb.",
        "Mar.",
        "Apr.",
        "May",
        "Jun.",
        "Jul.",
        "Aug.",
        "Sep.",
        "Oct.",
        "Nov.",
        "Dec."
      ];
      return mlist[dt.getMonth()];
    };

    // created dates for enddate bigger than startdate "filter"
    this.startYearMonth = month_name(
      new Date(selectedStartMonth + "/01/" + selectedStartYear)
    );
    this.endYearMonth = month_name(
      new Date(selectedEndMonth + "/01/" + selectedEndYear)
    );
    var startDate = new Date(selectedStartMonth + "/01/" + selectedStartYear);
    var endDate = new Date(selectedEndMonth + "/01/" + selectedEndYear);
    if (startDate > endDate) {
      alert(
        "Please ensure that the End Date is greater than or equal to the Start Date."
      );
    }
    // fetching data
    // limit is set to the max because i want to get ALL json from the time periods
    axios
      .get(
        "https://data.transportation.gov/resource/keg4-3bc2.json?$limit=100000&$where=date between '" +
          startYearSubtracted +
          "-" +
          selectedStartMonth +
          "-01' and '" +
          selectedEndYear +
          "-" +
          selectedEndMonth +
          "-01'"
      )
      .then(response => {
        // getting the response
        var reaction = response.data;
        // filtering the data down to only us-mexico
        var defaultData = reaction.filter(function(item) {
          return "US-Mexico Border".includes(item.border);
        });
        this.defaultData = defaultData;
        var defaultDataToCali = this.defaultData;
        // filtering data down to only california (this set of data will be used on default)
        var caliData = defaultDataToCali.filter(function(item) {
          return "CA".includes(item.state);
        });
        this.californiaData = caliData;
        // this reduces time as the method is only filtering what is neccesary
        if (this.selectedArea == ["California"]) {
          this.pipeData(caliData);
        }
        if (this.selectedArea == ["USA-Mexico"]) {
          this.pipeData(defaultData);
        }
      });
  }
},
created() {
  // this is on page load
  axios
    .get("https://data.bts.gov/id/keg4-3bc2.json?border=US-Mexico%20Border")
    .then(response => {
      var reactione = response.data;
      console.log(reactione);
      // get max date possible for query
      // var maxDate =
      //   Math.max.apply(
      //     null,
      //     reactione.map(function(e) {
      //       return e.date;
      //     })
      //   )
      var max = null;
      var min = null;
      for (var j = 0; j < reactione.length; j++) {
        var current = reactione[j];
        if (max === null || current.source > max.source) {
          max = current;
        }
        if (min === null || current.source < min.source) {
          min = current;
        }
      }
     //console.log(max.date);
      var day = moment(max.date);
      // moment(item.date,"YYYY/MM/DD").year()
      // var newDate = maxDate.setHours( maxDate.getHours() + 8 );
      //  //console.log(newDate);
      ////console.log(maxDate.getTime());
      // // var maxDateForSafari = maxDate.toUTCString();
      // var newDate = new Date(maxDate.getTime());
      ////console.log(newDate);
      var caliData = reactione.filter(function(item) {
        return "CA".includes(item.state);
      });
      console.log(caliData);
      // subtract the years
      var selectedEndYear = moment(day, "YYYY/MM/DD").year();
     console.log(selectedEndYear);
      var selectedEndMonth = moment(day, "YYYY/MM/DD").month() + 1;
     console.log(selectedEndMonth);
      var selectedStartMonth = moment(day, "YYYY/MM/DD").month() + 1;
      var selectedStartYear = moment(day, "YYYY/MM/DD").year() - 1;
      this.selectedEndYear = selectedEndYear
      this.selectedEndMonth =  ('0' + selectedEndMonth).slice(-2)
      console.log(selectedStartMonth);
      this.selectedStartMonth = ('0' + selectedStartMonth).slice(-2)
this.selectedStartYear  = selectedStartYear
      var data = [];
      // loop until the dynamic year
      for (var i = selectedEndYear; i >= 1996; i--) {
        data.push(i);
      }
      // insert array of year
      this.dynamicYear = data;
      // call the axios method
      // set empty arrays
      var containerPort = [];
      var containerMeasure = [];
      var containerTime = [];
      // for loop unique arrays
      for (let i = 0; i < caliData.length; i++) {
        containerPort.push(caliData[i].port_name);
        containerMeasure.push(caliData[i].measure);
        containerTime.push(caliData[i].date);
      }
      // uniqueArrays for checkboxes, selects, and radios
      var uniquePort = [...new Set(containerPort)];
      console.log(uniquePort);
      var uniqueMeasure = [...new Set(containerMeasure)];
      var uniqueTime = [...new Set(containerTime)];
      this.optionsStartSelect = uniqueTime;
      this.optionsEndSelect = uniqueTime;
      this.optionsForPorts = uniquePort;
      this.selectedOptionsForPorts = uniquePort;
      console.log(this.selectedOptionsForPorts);
      this.optionsForMeasure = uniqueMeasure;
      this.selectedOptionsForMeasure = uniqueMeasure;
      this.hasBeenCreated = true;
      this.getDataAxios(
        selectedEndYear,
        selectedEndMonth,
        selectedStartYear,
        selectedStartMonth
      );
    });
},
watch: {
  // event listener for when any selected array changes
  // had problems because the listener would trigger on mounted so lots of code preventing trigger on mounted
  selectedArea: function() {
    if (this.selectedArea == "California") {
      this.getNewQueryOptions(this.californiaData);
    }
    if (this.selectedArea == "USA-Mexico") {
      this.getNewQueryOptions(this.defaultData);
    }
    this.getDataAxios(
      this.selectedEndYear,
      this.selectedEndMonth,
      this.selectedStartYear,
      this.selectedStartMonth
    );
  },
  selectedEndYear: function() {
    this.getDataAxios(
      this.selectedEndYear,
      this.selectedEndMonth,
      this.selectedStartYear,
      this.selectedStartMonth
    );
  },
  selectedEndMonth: function() {
    this.getDataAxios(
      this.selectedEndYear,
      this.selectedEndMonth,
      this.selectedStartYear,
      this.selectedStartMonth
    );
  },
  selectedStartYear: function() {
    this.getDataAxios(
      this.selectedEndYear,
      this.selectedEndMonth,
      this.selectedStartYear,
      this.selectedStartMonth
    );
  },
  selectedStartMonth: function() {
    this.getDataAxios(
      this.selectedEndYear,
      this.selectedEndMonth,
      this.selectedStartYear,
      this.selectedStartMonth
    );
  },
  selectedOptionsForMeasure: function() {
    var booboo = this.optionsForMeasure;
    var gaagaa = this.selectedOptionsForMeasure;
    if (gaagaa.length == booboo.length && this.hasBeenCreated) {
     console.log("the query options have not been touched");
    }
    if (gaagaa.length == booboo.length && this.hasBeenCreated == false) {
      if (this.selectedArea == "California") {
        this.pipeData(this.californiaData);
      }
      if (this.selectedArea == "USA-Mexico") {
        this.pipeData(this.defaultData);
      }
    }
    if (gaagaa.length != booboo.length) {
      this.hasBeenCreated = false;
      if (this.selectedArea == "California") {
        this.pipeData(this.californiaData);
      }
      if (this.selectedArea == "USA-Mexico") {
        this.pipeData(this.defaultData);
      }
    }
  },
  selectedOptionsForPorts: function() {
    var booboo = this.optionsForPorts;
    var gaagaa = this.selectedOptionsForPorts;
    if (gaagaa.length == booboo.length && this.hasBeenCreated) {
     console.log("the query options have not been touched");
    }
    if (gaagaa.length == booboo.length && this.hasBeenCreated == false) {
      if (this.selectedArea == "California") {
        this.pipeData(this.californiaData);
      }
      if (this.selectedArea == "USA-Mexico") {
        this.pipeData(this.defaultData);
      }
    }
    if (gaagaa.length != booboo.length) {
      this.hasBeenCreated = false;
      if (this.selectedArea == "California") {
        this.pipeData(this.californiaData);
      }
      if (this.selectedArea == "USA-Mexico") {
        this.pipeData(this.defaultData);
      }
    }
  }
}
